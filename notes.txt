







Real life examples of array rotation:

CircuitBreaker 
- needed to keep track of n number of events
- needed to be performant 
	- circular datastructure 
	- range based queries needed sequential order

In memory log 
- need to be very performant 
- did not need to retain more than n records
	- circular datastructure - re-uses previous indexes
	- array rotation came into place - to convert the log to sequential order
	


Array rotation

[0] -- tree
[1] -- house
[2] -- boat
[3] -- cup
[4] -- water

We want 'house' to be the first entry in the array
- tree will have to move to position 4


increment all by 1

tree
house
boat
cup
water

---

[ tree - house - boat - cup - water ]
 
 --> water to the beginning - everything else moved 1 spot 
 
[ water - tree - house - boat - cup ]


0 - n

0 1 2 3 4 5 6 7 8 9 101
%5
0 1 2 3 4 0 1 2 3 4 1

6 % 5 = 1
5 % 5 = 0
1 % 5 = 1
2 % 5 = 2
0 % 5 = 0























 maven
 - what is it? 
 
 /src
 /src/java
 /src/java/main
 /src/java/main/com
 /src/java/main/com/company
 /src/java/main/com/company/Main.java
 
 MAVEN solves these questions
  - but I want to use a database (just an example)?
  	- go community - and look existing code (jar)
  		- any popular maven repository
  - pom.xml --- (file that has locations and version of other code we use)		
  		
  - I'm going use existing code 
  	- 1.) find where it is --- maven repository (web accessible)
  	- 2.) and download it --- maven downloads jars
  	- 3.) use it --- maven packages jars with my code/project
  		- lot's of possible options here --- maven learning curve starts here
 
 in the end:
 
 we have a 'package' 
 [ 		
	 /src --- our code
	 /libs --- the community code
	 	/multiple community components 
 ]	
 
 jar .. 
 - it's like a zip archive - but with a jar extension
 - inside are class files (our code)
 - inside are other jar files (other people's code)
 - inside are some configuration files - like a MANIFEST.MF and other things to help the jvm read it correctly. 
 	- MAVEN takes care of doing this - it calls it packaging.
 	
 - MAVEN -> our project -> creates a jar



















Data structures in Java?
 - what are they?
 - Different ways to store data 
 	- Choose one over the other depending on how you use it?
 - Collection of data and way to interact with it
 - Arrays/Queue/List/Stack
 - key / value pairs
 - multiple bits of data
 	- how to keep them organized?
 
real world example:	(Last In First Out)
 - clothes 
   - drawer 
     - things you wear like are? 
       - sits on top

digital example: (Last In First Out)    	
 - users of a webstore 
   - answer questions about new users 
     - how would you store them
 
- program slows down

     	
















Diamond problem


                  Animal
                    /\
                   /  \
                  /    \
             Cat /      \ Dog
				 \	    / 
				  \    /
                   \  /
                    \/ --- in Java these lines can't meet
                   Pet


What are the implications?
 - What if 
 	Dog -> public String soundItMakes();
    Cat -> public String soundItMakes();
		Pet -> public String soundItMakes(); ?? which is it?? 
			-> wouldn't be clear which it is
			-> compiler could make some choices - use Dog .. or Cat .. or neither?
	Java .. compiler .. just won't let you do this.
	
			


















A:
===============================================
Strong association - Rufus extends Dog etc...
Rufus is a Dog
Dog is a Mammal
Mammal is an Animal


B:
===============================================
Weak association - Rufus contains Dog etc...
Rufus has a Dog
Dog has a Mammal
Mammal has an Animal


A feel more natural

----------------------------

B is much more common .. 
 - 












inheritance 

specific --> more generic 



Rufus     -> Dog       -> Mammal    -> Animal -> Living -> Object

has name  -> has breed -> offspring -> 
can bark


Brutus    -> Cat       -> Mammal    -> Animal -> Living -> Object 

has name  -> has breed -> offspring -> 
can meow

-----------------------------------------------




















abstract class Cereal {
	
	abstract boolean itIsGood();
	
	abstract String getName();
	
	boolean willIEatIt() {
		if (itIsGood()) {
			return true;
		}
		System.out.println("Not eating " + getName() + " is it not good");
		return false;
	}
	
}






















java 
- folders and files
files all have a *.java extension
each *.java file has a matching public class inside

ie: 
	- MyObject.java contains [public class MyObject]

packages are .. just .. folders 

jar? what is a lot like zip archive of the compiled class files









































void method() throws SomeException {
	
}
Checked?? (required)
Unchecked?? (optional)
Both?? (yeah you can do it for both)

MyException extends Exception (Checked)
MyException extends RuntimeException (Un-Checked)

throw new MyException()

try {
	??? Try some code 
} 

catch (MyException e) {
	??? Catches exception // handles // recover? // log?
}

finally {
	??? No matter what .. do this
}



















Exceptions... 

Example:

NullPointerException
- NPE
- Happens a lot

Checked or unchecked?
A: Checked
B: Unchecked

checked vs unchecked
?? how do we know - what makes it checked vs unchecked?


----------------------------------------
You'll choose:

Unchecked exception:
NullPointerException -> RuntimeException -> Exception -> Throwable
----------------------- makes it unchecked ------------ makes it throwable

- not a real issue for application to run correctly
- writing less code // relying more on (loose working agreement, tribal/documented)
- frameworks/tools usually handle these ok

Checked exception:
MyCheckedException -> Exception -> Throwable
----------------------------------- makes it throwable

- real issue for application to run correctly
- writing more code // relying less on (loose working agreement, tribal/documented)
- explicitly choose not to collaborate with external frameworks 


















Atomic ?? what does that mean
- there is one 
- base level 
- simplest 

Atomic counter .. 

class MyNumber {

	int number = 0;
	
	int increment(int by) {
		number = number + by;
	}
	
	int getNumber() {
		return this.number;
	}

}

??

It's a version that is safe to be shared across multiple threads















Race between the tortoise and the hare.

hare is fast but arrogant
tortoise is slow but persistent

- hare get's far ahead - and takes a nap before finishing
- by the time he wakes up
- the tortoise is too far ahead
- the hare runs as fast as he can 
- but the tortoise wins the race

-------------------------------------------

race -----------------------------------------------------------|
       \--tortoise------------------------------------WAKE UP!--/
       \--hare-------------------------NAP----------------------/
























-----



how may can I have? 
- no real limit - you can have 1000's 

- how many should I have? 
	- depends on the runtime environment - how many CPU's??
	- if that is not clear - keep below 20
	
	
	20 threads but only 1 CPU core
		- what happens 
		CPU -> context switching  
			-> run some part of a thread - then 'switch' to another
			-> context switching - requires memory to be moved 
				-> expensive/slow
		



















 - Application
 	- Controller 
 		- Service 
 			- Service B 
 				- Client (HTTP)
 					- Library 
 						- Library Component 
 							- Throws error / has error

 If you had to write code to pass errors up to the Controller
 - that would be a lot of work
 - error prone 


 						<- pass the error back
 					<- Library pass the error back
 				<- Client pass the error back
 			<- Service B pass the error back
 		<- Service pass the error back 
 	<- Controller - shows the error to the customer
>


 - Application
 	- Controller 
 		- Service 
 			- Service B 
 				- Client (HTTP)
 					- Library 
 						- Library Component 
 							- Throws error / has error
 							- throw new Exception("Unable to parse BLA-12") -> Thread stops here and jumps to the next 'relevant' try block -> catch clause

 	Controller:
 		try {
	 		try {
	 			Service.call()
	 		} catch (Exception) {
		 		// AA
	 		}
 		} catch (Exception e) {
	 		// BB
	 	}

 						<- Error is thrown 
 					....
 				....
 			....
 		.... 
 	<- Controller - shows the error to the customer






Polymorphism - Java??

Ability for objects to take different forms 
 - compile-time
 	- overloading
 - runtime 
 	- dynamic method
 	- closures 



Why is the point? 
 - readable --- handle difficult things better
 	- understandable? 
 - code re-use 
 - flexibility 
 - objects .. are a way of grouping like things 
 - categorize .. taxonomy/categories .. not perfect 
 - pragmatic .. efficient .. need flexibility 
 
 account for anything that doesn't match existing taxonomy
 - also - DRY - (Don't repeat yourself)
 	- less code
 	- generalizing
 	
 
 	













String message = "Hi merry, santa.2007@northpole.io Christmas eve!";

Pattern.compile("[\s]+[^\s]+@[^\s]{2,253}.[a-b]{2,55}");

[\s]+[^\s]+@[^\s]{2,253}.[a-b]{2,55}

^ - start of string
$ - end of string

-- pattern
[0-9a-zU.*] match one character of for example, 5 or t or U or . or *
-- special character within []
^ - NOT

-- Quantifiers
[somestuff]+          // 1 or more
[somestuff]?          // 0 or 1
[somestuff]*          // 0 or more
[somestuff]{3}        // needs to be 3

I WAS NOT CORRECT - [somestuff]{3-5}      // doesn't work -- sorry
I WAS NOT CORRECT - [somestuff]{3,5}      // needs to be 3 or 5 <- range



